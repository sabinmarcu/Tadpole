class LineRenderer extends DepMan.renderer "Base"
	(@node) ~> super!; @setup-size!; @sequence!
	setup-size: ~>
		@deltas = x: @node.location.parent.x - @node.location.x, y: @node.location.parent.y - @node.location.y
		@buffer.width = Math.abs @deltas.x
		@buffer.height = Math.abs @deltas.y

	sequence: ~>
		@set-point!
		@reset!

	set-point: ~>
		# Initial
		@points = 
			first: 
				* x: 0
				* y: 0
			second:
				* x: 0 
				* y: 0
		# X Setup
		if @deltas.x > 0 
			@points.first.x = node.location.x
			@points.second.x = node.$parent.location.x
		else 
			@points.first.x = node.$parent.location.x
			@points.second.x = node.location.x
		# Y Setup
		if @deltas.y > 0
			@points.first.y = node.location.y
			@points.second.y = node.$parent.location.y
		else
			@points.first.y = node.$parent.location.y
			@points.second.y = node.location.y

	draw-line: ~>
		@context.stroke-style = "rgb(100, 100, 100)"
		@context.begin-path!
		@context.move-to @points.first.x, @points.first.y
		@context.bezier-curve-to @points.first.x + @deltas.x / 3, @points.first.y + @deltas.y / 3, @points.second.x - @deltas.x / 3, @points.second.y - @deltas.y / 3, @points.second.x, @points.second.y
		@context.stroke!


module.exports = LineRenderer